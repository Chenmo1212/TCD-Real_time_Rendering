#version 330      // Specifies the GLSL version and profile to use

out vec4 FragColor;  // Output variable for fragment color

in vec3 fragPosTS;   // Input variable for fragment position in tangent space
in vec3 lightPosTS;  // Input variable for light position in tangent space
in vec3 viewPosTS;   // Input variable for view position in tangent space
in vec2 texCoords;   // Input variable for texture coordinates
in vec3 normalIn;    // Input variable for normal in tangent space

uniform sampler2D diffuseMap;  // Uniform variable for diffuse texture map
uniform sampler2D normalMap;   // Uniform variable for normal texture map
uniform sampler2D depthMap;    // Uniform variable for depth texture map
uniform int mappingMode = 1;   // Uniform variable for mapping mode (default is 1)

// Function to calculate texture offset using parallax mapping
vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir){ 
    float depth =  texture(depthMap, texCoords).r;
    vec2 p = viewDir.xy * depth / viewDir.z * 0.05;
    return texCoords - p;
}

void main()
{
  vec3 normal;

  // Choose the mapping mode based on the uniform variable
  if(mappingMode == 1) {
    normal = normalize(normalIn);
  }
  else if(mappingMode == 2){
    normal = texture(normalMap, texCoords).rgb;
    normal = normalize(normal * 2.0 - 1.0);  // Convert normal vector to [-1,1] range (in tangent space)
  } else if(mappingMode == 3) {
    vec3 viewDir = normalize(viewPosTS - fragPosTS);
    vec2 tmpTexCoords = ParallaxMapping(texCoords,  viewDir);  // Calculate texture offset using parallax mapping
    normal = texture(normalMap, tmpTexCoords).rgb;
    normal = normalize(normal * 2.0 - 1.0);  // Convert normal vector to [-1,1] range (in tangent space)
  }

  vec3 color = texture(diffuseMap, texCoords).rgb;

  vec3 ambient = 0.6 * color;

  vec3 lightDir = normalize(lightPosTS - fragPosTS);
  float diff = max(dot(lightDir, normal), 0.0);
  vec3 diffuse = diff * color;

  vec3 viewDir = normalize(viewPosTS - fragPosTS);
  vec3 halfwayDir = normalize(lightDir + viewDir);
  float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
  vec3 specular = vec3(0.2) * spec;

  FragColor = vec4(ambient + diffuse + specular, 1.0);  // Combine ambient, diffuse, and specular components for the final color
}
